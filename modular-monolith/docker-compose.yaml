version: '3.8'

services:

  webserver:
    build: ./webserver/
    image: ${PROJECT}/webserver:${TAG}
    volumes:
      - static:/app/static
      - media:/app/media
    ports:
      - ${WEBSERVER_PORT}:80
    depends_on:
      - backend
    links:
      - backend
    labels:
      "docker_compose_diagram.icon": "nginx"
      "docker_compose_diagram.description": "Reverse proxy"

  postgres_db:
    image: postgres:latest
    env_file: ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    labels:
      "docker_compose_diagram.icon": "postgres"
      "docker_compose_diagram.description": "Persistant Store"

  backend:
    build: ./backend/
    image: ${PROJECT}/backend:${TAG}
    env_file: ./.env
    volumes:
      - static:/app/static
      - media:/app/media
      - ./backend:/app
    depends_on:
        - postgres_db
    ports:
        - "8009:8000"
    command: python manage.py runserver 0.0.0.0:8000
    labels:
      "docker_compose_diagram.icon": "django"
      "docker_compose_diagram.description": "API server"

  rabbitmq:
    image: rabbitmq:3-management-alpine
    volumes:
        - rabbitmq_data:/var/lib/rabbitmq
    ports:
        - "15672:15672"
    labels:
      "docker_compose_diagram.icon": "rabbitmq"
      "docker_compose_diagram.description": "Messaging and streaming broker"
  worker:
    image: ${PROJECT}/backend:${TAG}
    env_file: ./.env
    volumes:
      - ./backend:/app
    depends_on:
      - rabbitmq
    command: ./scripts/start_worker.sh
    labels:
      "docker_compose_diagram.icon": "celery"
      "docker_compose_diagram.description": "Task Queue implementation"

  flower:
    image: mher/flower
    command: celery flower --persistent=True --db=/data/flower.db --max_tasks=3000
    environment:
        - CELERY_BROKER_URL=pyamqp://guest@rabbitmq//
        - FLOWER_PORT=5555
    ports:
        - 5555:5555
    depends_on:
        - rabbitmq
    volumes:
        - flower_data:/data
    labels:
      "docker_compose_diagram.icon": "celery"
      "docker_compose_diagram.description": "Monitor Celery workers"

volumes:
  postgres_data:
  static:
  media:
  rabbitmq_data:
  flower_data: